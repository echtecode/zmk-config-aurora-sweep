/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        layer2 {
            bindings = <&mo 2>;
            key-positions = <13 12>;
        };

        layer3 {
            bindings = <&mo 3>;
            key-positions = <12 11>;
        };
    };

    behaviors {
        esc_or_layer1: esc_or_layer1 {
            compatible = "zmk,behavior-hold-tap";
            label = "ESC_OR_LAYER1";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };

        homerow_mods: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp Q                    &kp W           &kp E  &kp R  &kp T    &kp Y  &kp U  &kp I      &kp O      &kp P
&kp A                    &kp S           &kp D  &kp F  &kp G    &kp H  &kp J  &kp K      &kp L      &kp BACKSPACE
&kp Z                    &kp X           &kp C  &kp V  &kp B    &kp N  &kp M  &kp COMMA  &kp DOT    &none
&esc_or_layer1 1 ESCAPE  &kp LEFT_SHIFT                                                  &kp ENTER  &kp SPACE
            >;
        };

        symbols {
            bindings = <
&kp EXCL   &kp AT         &kp HASH              &kp DLLR           &kp PRCNT           &kp CARET          &kp MINUS        &kp UNDERSCORE         &kp AMPERSAND     &kp ASTERISK
&kp SLASH  &kp LESS_THAN  &kp LEFT_PARENTHESIS  &kp LEFT_BRACE     &kp LEFT_BRACKET    &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &kp GREATER_THAN  &kp BACKSLASH
&kp TILDE  &kp GRAVE      &kp SINGLE_QUOTE      &kp DOUBLE_QUOTES  &kp EQUAL           &kp PLUS           &kp COLON        &kp SEMICOLON          &kp QUESTION      &kp PIPE
&trans     &none                                                                                                                                  &none             &none
            >;
        };

        navigation {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &kp LG(LEFT)    &kp LA(LEFT_ARROW)  &kp LA(RIGHT_ARROW)  &kp LG(RIGHT_ARROW)  &trans
&trans  &trans  &trans  &trans  &trans    &kp LEFT_ARROW  &kp DOWN_ARROW      &kp UP_ARROW         &kp RIGHT_ARROW      &kp BACKSPACE
&trans  &trans  &trans  &trans  &trans    &trans          &trans              &trans               &trans               &trans
&trans  &trans                                                                                     &trans               &trans
            >;
        };

        numbers {
            bindings = <
&trans        &trans        &trans        &trans        &trans        &kp PLUS      &kp N7        &kp NUMBER_8  &kp NUMBER_9  &kp MINUS
&trans        &trans        &trans        &trans        &trans        &kp ASTERISK  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp SLASH
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR    &kp EQUAL     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp COMMA
&trans        &trans                                                                                            &kp RETURN    &kp NUMBER_0
            >;
        };

        window_management {
            bindings = <
&trans                  &trans                      &trans  &trans  &trans    &trans             &kp LA(A)  &kp LA(X)  &kp LA(O)                    &trans
&trans                  &trans                      &trans  &trans  &trans    &kp LG(LC(LA(F)))  &kp LA(T)  &kp LA(C)  &kp LA(M)                    &kp LA(E)
&trans                  &trans                      &trans  &trans  &trans    &trans             &kp LA(V)  &kp LA(S)  &trans                       &trans
&kp LC(LA(LEFT_ARROW))  &kp LG(LC(LA(LEFT_ARROW)))                                                                     &kp LG(LC(LA(RIGHT_ARROW)))  &kp LC(LA(RIGHT_ARROW))
            >;
        };
    };
};
